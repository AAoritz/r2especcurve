{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "      ggplot2::theme_void() +",
        "+ ",
        "      ggplot2::theme(axis.text.y = ggplot2::element_text()) +",
        "+ ",
        "      ggplot2::guides(color = 'none')",
        "+ ",
        "    if (!is.logical(color_text_labels)) {",
        "+ ",
        "      p2 = p2 + color_text_labels",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (return_separate) {",
        "+ ",
        "    return(list(p1,p2))",
        "+ ",
        "  }",
        "+ ",
        "  p1/p2 + patchwork::plot_layout(widths = c(1,1), heights = height_ratio)",
        "+ ",
        "}",
        "\nRestarting R session...\n\n",
        "> ",
        "library(r2especcurve)",
        "> ",
        "spec_curve(cholera_dat[cholera_dat$outcome == 3,],",
        "+ ",
        "           decision_cols = c('analytical_decision_1',",
        "+ ",
        "                             'analytical_decision_2',",
        "+ ",
        "                             'analytical_decision_3'),",
        "+ ",
        "           decision_labels = c('Specification',",
        "+ ",
        "                               'Bandwidth',",
        "+ ",
        "                               'Controls'),",
        "+ ",
        "           orig_spec_values = c(1,1,1))",
        "Error in as.data.table(spec_data) : \n  could not find function \"as.data.table\"\n",
        "> ",
        "library(data.table)",
        "data.table 1.14.8 using 4 threads (see ?getDTthreads).  Latest news: r-datatable.com\n",
        "> ",
        "spec_curve(dat[dat$outcome == 3,],",
        "+ ",
        "           decision_cols = c('analytical_decision_1',",
        "+ ",
        "                             'analytical_decision_2',",
        "+ ",
        "                             'analytical_decision_3'),",
        "+ ",
        "           decision_labels = c('Specification',",
        "+ ",
        "                               'Bandwidth',",
        "+ ",
        "                               'Controls'),",
        "+ ",
        "           orig_spec_values = c(1,1,1))",
        "Error: object 'dat' not found\n",
        "> ",
        "spec_curve(cholera_dat[cholera_dat$outcome == 3,],",
        "+ ",
        "           decision_cols = c('analytical_decision_1',",
        "+ ",
        "                             'analytical_decision_2',",
        "+ ",
        "                             'analytical_decision_3'),",
        "+ ",
        "           decision_labels = c('Specification',",
        "+ ",
        "                               'Bandwidth',",
        "+ ",
        "                               'Controls'),",
        "+ ",
        "           orig_spec_values = c(1,1,1))",
        "> ",
        "#' @param return_separate Return two ggplots separately in a list so you can combine them yourself.",
        "> ",
        "#' @examples",
        "> ",
        "#'",
        "> ",
        "#' # Example data",
        "> ",
        "#' data(cholera_dat)",
        "> ",
        "#' spec_curve(cholera_dat[cholera_dat$outcome == 3,],",
        "> ",
        "#'   decision_cols = c('analytical_decision_1','analytical_decision_2','analytical_decision_3'),",
        "> ",
        "#'   decision_labels = c('Specification','Bandwidth','Controls'))",
        "> ",
        "#'",
        "> ",
        "#' @export",
        "> ",
        "spec_curve = function(spec_data, decision_cols,",
        "+ ",
        "                      beta = 'beta', se = 'se',",
        "+ ",
        "                      decision_labels = NULL,",
        "+ ",
        "                      orig_beta_se = NULL,",
        "+ ",
        "                      orig_spec_values = NULL,",
        "+ ",
        "                      left_box = 50,",
        "+ ",
        "                      add_hline_at = 0,",
        "+ ",
        "                      skip_theme = FALSE,",
        "+ ",
        "                      font_size = 8,",
        "+ ",
        "                      color_text_labels = NULL,",
        "+ ",
        "                      height_ratio = c(4,1),",
        "+ ",
        "                      return_separate = FALSE) {",
        "+ ",
        "  takennames = c('ci90_bot','ci90_top','ci95_bot','ci95_top',",
        "+ ",
        "                 'order','Original')",
        "+ ",
        "  if (any(takennames %in% names(spec_data))) {",
        "+ ",
        "    stop(paste0('You cannot have the following column names in your data: ',",
        "+ ",
        "                paste(takennames, collapse = ', ')))",
        "+ ",
        "  }",
        "+ ",
        "  if (any(c(beta,se) %in% decision_cols)) {",
        "+ ",
        "    stop('You cannot have your beta or se columns in your decision_cols columns.')",
        "+ ",
        "  }",
        "+ ",
        "  if (!is.null(decision_labels)) {",
        "+ ",
        "    if (length(decision_cols) != length(decision_labels)) {",
        "+ ",
        "      stop('decision_labels and decision_cols must have the same length.')",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  dat = as.data.table(spec_data)",
        "+ ",
        "  setnames(dat,beta,'beta')",
        "+ ",
        "  setnames(dat,se,'se')",
        "+ ",
        "  if (!is.null(orig_beta_se) & !is.null(orig_spec_values)) {",
        "+ ",
        "    stop('Please only specify one of orig_beta_se and orig_spec_values')",
        "+ ",
        "  }",
        "+ ",
        "  dat[, Original := FALSE]",
        "+ ",
        "  if (!is.null(orig_spec_values)) {",
        "+ ",
        "    isorig = lapply(1:length(decision_cols),",
        "+ ",
        "                    \\(x) dat[[decision_cols[x]]] == orig_spec_values[x])",
        "+ ",
        "    for (i in 2:length(decision_cols)) {",
        "+ ",
        "      isorig[[1]] = isorig[[1]]*isorig[[i]]",
        "+ ",
        "    }",
        "+ ",
        "    dat[, Original := as.logical(isorig[[1]])]",
        "+ ",
        "  }",
        "+ ",
        "  if (!is.null(orig_beta_se)) {",
        "+ ",
        "    if (is.null(orig_spec_values)) {",
        "+ ",
        "      orig_spec_values = rep(0,length(decision_cols))",
        "+ ",
        "    }",
        "+ ",
        "    origspec = data.table(beta = orig_beta_se[1],",
        "+ ",
        "                          se = orig_beta_se[2])",
        "+ ",
        "    for (i in 1:length(orig_spec_values)) {",
        "+ ",
        "      origspec[[decision_cols[i]]] = orig_spec_values[i]",
        "+ ",
        "    }",
        "+ ",
        "    origspec[, Original := TRUE]",
        "+ ",
        "    dat[, Original := FALSE]",
        "+ ",
        "    dat = rbind(dat, origspec, fill = TRUE)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  dat[, ci90_bot := beta - 1.65*se]",
        "+ ",
        "  dat[, ci90_top := beta + 1.65*se]",
        "+ ",
        "  dat[, ci95_bot := beta - 1.96*se]",
        "+ ",
        "  dat[, ci95_top := beta + 1.96*se]",
        "+ ",
        "  setorder(dat, beta)",
        "+ ",
        "  dat[, order := 1:.N]",
        "+ ",
        "",
        "+ ",
        "  p1 = ggplot2::ggplot(dat, ggplot2::aes(x = order, y = beta,",
        "+ ",
        "                  ymin = ci95_bot, ymax = ci95_top,",
        "+ ",
        "                  xmin = order - .5, xmax = order + .5,",
        "+ ",
        "                  fill = Original)) +",
        "+ ",
        "    ggplot2::geom_rect(alpha = .2) +",
        "+ ",
        "    ggplot2::geom_rect(alpha = .5,",
        "+ ",
        "                       ggplot2::aes(ymin = ci90_bot, ymax = ci90_top)) +",
        "+ ",
        "    ggplot2::geom_point(size = 1, color = 'black',",
        "+ ",
        "                        show.legend = FALSE)+",
        "+ ",
        "    ggplot2::scale_fill_manual(values = c('#00BDD0','salmon'),",
        "+ ",
        "                               labels = c('Variant','Original'))",
        "+ ",
        "  if (!is.null(add_hline_at)) {",
        "+ ",
        "    p1 = p1 + ggplot2::geom_hline(yintercept = add_hline_at,",
        "+ ",
        "                                  color = 'black')",
        "+ ",
        "  }",
        "+ ",
        "  if (sum(dat$Original) == 0) {",
        "+ ",
        "    p1 = p1 + ggplot2::guides(fill = 'none')",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "  if (!skip_theme) {",
        "+ ",
        "    p1 = p1 +",
        "+ ",
        "      ggplot2::theme_classic() +",
        "+ ",
        "      ggplot2::theme(axis.title.y = ggplot2::element_text(angle = 0, hjust = 0, vjust = 1),",
        "+ ",
        "                     panel.grid.major.y = ggplot2::element_line(linewidth = .25,",
        "+ ",
        "                                                                 linetype = 'dashed'),",
        "+ ",
        "                     legend.position = 'top') +",
        "+ ",
        "      ggplot2::labs(y = \"Effect\",",
        "+ ",
        "                    caption = c('90% and 95% confidence intervals shown.',",
        "+ ",
        "                                fill = NULL))",
        "+ ",
        "  }",
        "+ ",
        "  p1 = p1 +",
        "+ ",
        "    ggplot2::theme(axis.text.x = ggplot2::element_blank(),",
        "+ ",
        "                   axis.title.x = ggplot2::element_blank(),",
        "+ ",
        "                   axis.ticks.x = ggplot2::element_blank())",
        "+ ",
        "",
        "+ ",
        "  p2dat = melt(subset(dat, select = c('order',",
        "+ ",
        "                                      decision_cols)), id.vars = 'order')",
        "+ ",
        "  if (!is.null(decision_labels)) {",
        "+ ",
        "    for (i in 1:length(decision_cols)) {",
        "+ ",
        "      p2dat[variable == decision_cols[i], variable := decision_labels[i]]",
        "+ ",
        "    }",
        "+ ",
        "    p2dat[, variable := factor(variable, levels = rev(decision_labels))]",
        "+ ",
        "  } else {",
        "+ ",
        "    p2dat[, variable := factor(variable, levels = rev(decision_cols))]",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (is.null(color_text_labels)) {",
        "+ ",
        "    p2 = ggplot2::ggplot(p2dat, ggplot2::aes(x = order,",
        "+ ",
        "                                           y = variable,",
        "+ ",
        "                                           label = value)) +",
        "+ ",
        "      ggplot2::geom_text(size = font_size/ggplot2::.pt) +",
        "+ ",
        "      ggplot2::theme_void() +",
        "+ ",
        "      ggplot2::theme(axis.text.y = ggplot2::element_text())",
        "+ ",
        "  } else {",
        "+ ",
        "    p2 = ggplot2::ggplot(p2dat, ggplot2::aes(x = order,",
        "+ ",
        "                                             y = variable,",
        "+ ",
        "                                             label = value,",
        "+ ",
        "                                             color = factor(value))) +",
        "+ ",
        "      ggplot2::geom_text(size = font_size/ggplot2::.pt) +",
        "+ ",
        "      ggplot2::theme_void() +",
        "+ ",
        "      ggplot2::theme(axis.text.y = ggplot2::element_text()) +",
        "+ ",
        "      ggplot2::guides(color = 'none')",
        "+ ",
        "    if (!is.logical(color_text_labels)) {",
        "+ ",
        "      p2 = p2 + color_text_labels",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (return_separate) {",
        "+ ",
        "    return(list(p1,p2))",
        "+ ",
        "  }",
        "+ ",
        "  p1/p2 + patchwork::plot_layout(widths = c(1,1), heights = height_ratio)",
        "+ ",
        "}",
        "> ",
        "spec_curve(cholera_dat[cholera_dat$outcome == 3,],",
        "+ ",
        "           decision_cols = c('analytical_decision_1',",
        "+ ",
        "                             'analytical_decision_2',",
        "+ ",
        "                             'analytical_decision_3'),",
        "+ ",
        "           decision_labels = c('Specification',",
        "+ ",
        "                               'Bandwidth',",
        "+ ",
        "                               'Controls'),",
        "+ ",
        "           orig_spec_values = c(1,1,1))",
        "> ",
        "#' @param return_separate Return two ggplots separately in a list so you can combine them yourself.",
        "> ",
        "#' @examples",
        "> ",
        "#'",
        "> ",
        "#' # Example data",
        "> ",
        "#' data(cholera_dat)",
        "> ",
        "#' spec_curve(cholera_dat[cholera_dat$outcome == 3,],",
        "> ",
        "#'   decision_cols = c('analytical_decision_1','analytical_decision_2','analytical_decision_3'),",
        "> ",
        "#'   decision_labels = c('Specification','Bandwidth','Controls'))",
        "> ",
        "#'",
        "> ",
        "#' @export",
        "> ",
        "spec_curve = function(spec_data, decision_cols,",
        "+ ",
        "                      beta = 'beta', se = 'se',",
        "+ ",
        "                      decision_labels = NULL,",
        "+ ",
        "                      orig_beta_se = NULL,",
        "+ ",
        "                      orig_spec_values = NULL,",
        "+ ",
        "                      left_box = 50,",
        "+ ",
        "                      add_hline_at = 0,",
        "+ ",
        "                      skip_theme = FALSE,",
        "+ ",
        "                      font_size = 8,",
        "+ ",
        "                      color_text_labels = NULL,",
        "+ ",
        "                      height_ratio = c(4,1),",
        "+ ",
        "                      return_separate = FALSE) {",
        "+ ",
        "  takennames = c('ci90_bot','ci90_top','ci95_bot','ci95_top',",
        "+ ",
        "                 'order','Original')",
        "+ ",
        "  if (any(takennames %in% names(spec_data))) {",
        "+ ",
        "    stop(paste0('You cannot have the following column names in your data: ',",
        "+ ",
        "                paste(takennames, collapse = ', ')))",
        "+ ",
        "  }",
        "+ ",
        "  if (any(c(beta,se) %in% decision_cols)) {",
        "+ ",
        "    stop('You cannot have your beta or se columns in your decision_cols columns.')",
        "+ ",
        "  }",
        "+ ",
        "  if (!is.null(decision_labels)) {",
        "+ ",
        "    if (length(decision_cols) != length(decision_labels)) {",
        "+ ",
        "      stop('decision_labels and decision_cols must have the same length.')",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  dat = as.data.table(spec_data)",
        "+ ",
        "  setnames(dat,beta,'beta')",
        "+ ",
        "  setnames(dat,se,'se')",
        "+ ",
        "  if (!is.null(orig_beta_se) & !is.null(orig_spec_values)) {",
        "+ ",
        "    stop('Please only specify one of orig_beta_se and orig_spec_values')",
        "+ ",
        "  }",
        "+ ",
        "  dat[, Original := FALSE]",
        "+ ",
        "  if (!is.null(orig_spec_values)) {",
        "+ ",
        "    isorig = lapply(1:length(decision_cols),",
        "+ ",
        "                    \\(x) dat[[decision_cols[x]]] == orig_spec_values[x])",
        "+ ",
        "    for (i in 2:length(decision_cols)) {",
        "+ ",
        "      isorig[[1]] = isorig[[1]]*isorig[[i]]",
        "+ ",
        "    }",
        "+ ",
        "    dat[, Original := as.logical(isorig[[1]])]",
        "+ ",
        "  }",
        "+ ",
        "  if (!is.null(orig_beta_se)) {",
        "+ ",
        "    if (is.null(orig_spec_values)) {",
        "+ ",
        "      orig_spec_values = rep(0,length(decision_cols))",
        "+ ",
        "    }",
        "+ ",
        "    origspec = data.table(beta = orig_beta_se[1],",
        "+ ",
        "                          se = orig_beta_se[2])",
        "+ ",
        "    for (i in 1:length(orig_spec_values)) {",
        "+ ",
        "      origspec[[decision_cols[i]]] = orig_spec_values[i]",
        "+ ",
        "    }",
        "+ ",
        "    origspec[, Original := TRUE]",
        "+ ",
        "    dat[, Original := FALSE]",
        "+ ",
        "    dat = rbind(dat, origspec, fill = TRUE)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  dat[, ci90_bot := beta - 1.65*se]",
        "+ ",
        "  dat[, ci90_top := beta + 1.65*se]",
        "+ ",
        "  dat[, ci95_bot := beta - 1.96*se]",
        "+ ",
        "  dat[, ci95_top := beta + 1.96*se]",
        "+ ",
        "  setorder(dat, beta)",
        "+ ",
        "  dat[, order := 1:.N]",
        "+ ",
        "",
        "+ ",
        "  p1 = ggplot2::ggplot(dat, ggplot2::aes(x = order, y = beta,",
        "+ ",
        "                  ymin = ci95_bot, ymax = ci95_top,",
        "+ ",
        "                  xmin = order - .5, xmax = order + .5,",
        "+ ",
        "                  fill = Original)) +",
        "+ ",
        "    ggplot2::geom_rect(alpha = .2) +",
        "+ ",
        "    ggplot2::geom_rect(alpha = .5,",
        "+ ",
        "                       ggplot2::aes(ymin = ci90_bot, ymax = ci90_top)) +",
        "+ ",
        "    ggplot2::geom_point(size = 1, color = 'black',",
        "+ ",
        "                        show.legend = FALSE)+",
        "+ ",
        "    ggplot2::scale_fill_manual(values = c('#00BDD0','salmon'),",
        "+ ",
        "                               labels = c('Variant','Original'))",
        "+ ",
        "  if (!is.null(add_hline_at)) {",
        "+ ",
        "    p1 = p1 + ggplot2::geom_hline(yintercept = add_hline_at,",
        "+ ",
        "                                  color = 'black')",
        "+ ",
        "  }",
        "+ ",
        "  if (sum(dat$Original) == 0) {",
        "+ ",
        "    p1 = p1 + ggplot2::guides(fill = 'none')",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "  if (!skip_theme) {",
        "+ ",
        "    p1 = p1 +",
        "+ ",
        "      ggplot2::theme_classic() +",
        "+ ",
        "      ggplot2::theme(axis.title.y = ggplot2::element_text(angle = 0, hjust = 0, vjust = 1),",
        "+ ",
        "                     panel.grid.major.y = ggplot2::element_line(linewidth = .25,",
        "+ ",
        "                                                                 linetype = 'dashed'),",
        "+ ",
        "                     legend.position = 'top') +",
        "+ ",
        "      ggplot2::labs(y = \"Effect\",",
        "+ ",
        "                    caption = '90% and 95% confidence intervals shown.',",
        "+ ",
        "                    fill = NULL)",
        "+ ",
        "  }",
        "+ ",
        "  p1 = p1 +",
        "+ ",
        "    ggplot2::theme(axis.text.x = ggplot2::element_blank(),",
        "+ ",
        "                   axis.title.x = ggplot2::element_blank(),",
        "+ ",
        "                   axis.ticks.x = ggplot2::element_blank())",
        "+ ",
        "",
        "+ ",
        "  p2dat = melt(subset(dat, select = c('order',",
        "+ ",
        "                                      decision_cols)), id.vars = 'order')",
        "+ ",
        "  if (!is.null(decision_labels)) {",
        "+ ",
        "    for (i in 1:length(decision_cols)) {",
        "+ ",
        "      p2dat[variable == decision_cols[i], variable := decision_labels[i]]",
        "+ ",
        "    }",
        "+ ",
        "    p2dat[, variable := factor(variable, levels = rev(decision_labels))]",
        "+ ",
        "  } else {",
        "+ ",
        "    p2dat[, variable := factor(variable, levels = rev(decision_cols))]",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (is.null(color_text_labels)) {",
        "+ ",
        "    p2 = ggplot2::ggplot(p2dat, ggplot2::aes(x = order,",
        "+ ",
        "                                           y = variable,",
        "+ ",
        "                                           label = value)) +",
        "+ ",
        "      ggplot2::geom_text(size = font_size/ggplot2::.pt) +",
        "+ ",
        "      ggplot2::theme_void() +",
        "+ ",
        "      ggplot2::theme(axis.text.y = ggplot2::element_text())",
        "+ ",
        "  } else {",
        "+ ",
        "    p2 = ggplot2::ggplot(p2dat, ggplot2::aes(x = order,",
        "+ ",
        "                                             y = variable,",
        "+ ",
        "                                             label = value,",
        "+ ",
        "                                             color = factor(value))) +",
        "+ ",
        "      ggplot2::geom_text(size = font_size/ggplot2::.pt) +",
        "+ ",
        "      ggplot2::theme_void() +",
        "+ ",
        "      ggplot2::theme(axis.text.y = ggplot2::element_text()) +",
        "+ ",
        "      ggplot2::guides(color = 'none')",
        "+ ",
        "    if (!is.logical(color_text_labels)) {",
        "+ ",
        "      p2 = p2 + color_text_labels",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (return_separate) {",
        "+ ",
        "    return(list(p1,p2))",
        "+ ",
        "  }",
        "+ ",
        "  p1/p2 + patchwork::plot_layout(widths = c(1,1), heights = height_ratio)",
        "+ ",
        "}",
        "> ",
        "spec_curve(cholera_dat[cholera_dat$outcome == 3,],",
        "+ ",
        "           decision_cols = c('analytical_decision_1',",
        "+ ",
        "                             'analytical_decision_2',",
        "+ ",
        "                             'analytical_decision_3'),",
        "+ ",
        "           decision_labels = c('Specification',",
        "+ ",
        "                               'Bandwidth',",
        "+ ",
        "                               'Controls'),",
        "+ ",
        "           orig_spec_values = c(1,1,1))",
        "> ",
        "#' @param return_separate Return two ggplots separately in a list so you can combine them yourself.",
        "> ",
        "#' @examples",
        "> ",
        "#'",
        "> ",
        "#' # Example data",
        "> ",
        "#' data(cholera_dat)",
        "> ",
        "#' spec_curve(cholera_dat[cholera_dat$outcome == 3,],",
        "> ",
        "#'   decision_cols = c('analytical_decision_1','analytical_decision_2','analytical_decision_3'),",
        "> ",
        "#'   decision_labels = c('Specification','Bandwidth','Controls'))",
        "> ",
        "#'",
        "> ",
        "#' @export",
        "> ",
        "spec_curve = function(spec_data, decision_cols,",
        "+ ",
        "                      beta = 'beta', se = 'se',",
        "+ ",
        "                      decision_labels = NULL,",
        "+ ",
        "                      orig_beta_se = NULL,",
        "+ ",
        "                      orig_spec_values = NULL,",
        "+ ",
        "                      left_box = 50,",
        "+ ",
        "                      add_hline_at = 0,",
        "+ ",
        "                      skip_theme = FALSE,",
        "+ ",
        "                      font_size = 8,",
        "+ ",
        "                      color_text_labels = NULL,",
        "+ ",
        "                      height_ratio = c(4,1),",
        "+ ",
        "                      return_separate = FALSE) {",
        "+ ",
        "  takennames = c('ci90_bot','ci90_top','ci95_bot','ci95_top',",
        "+ ",
        "                 'order','Original')",
        "+ ",
        "  if (any(takennames %in% names(spec_data))) {",
        "+ ",
        "    stop(paste0('You cannot have the following column names in your data: ',",
        "+ ",
        "                paste(takennames, collapse = ', ')))",
        "+ ",
        "  }",
        "+ ",
        "  if (any(c(beta,se) %in% decision_cols)) {",
        "+ ",
        "    stop('You cannot have your beta or se columns in your decision_cols columns.')",
        "+ ",
        "  }",
        "+ ",
        "  if (!is.null(decision_labels)) {",
        "+ ",
        "    if (length(decision_cols) != length(decision_labels)) {",
        "+ ",
        "      stop('decision_labels and decision_cols must have the same length.')",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "  dat = as.data.table(spec_data)",
        "+ ",
        "  setnames(dat,beta,'beta')",
        "+ ",
        "  setnames(dat,se,'se')",
        "+ ",
        "  if (!is.null(orig_beta_se) & !is.null(orig_spec_values)) {",
        "+ ",
        "    stop('Please only specify one of orig_beta_se and orig_spec_values')",
        "+ ",
        "  }",
        "+ ",
        "  dat[, Original := FALSE]",
        "+ ",
        "  if (!is.null(orig_spec_values)) {",
        "+ ",
        "    isorig = lapply(1:length(decision_cols),",
        "+ ",
        "                    \\(x) dat[[decision_cols[x]]] == orig_spec_values[x])",
        "+ ",
        "    for (i in 2:length(decision_cols)) {",
        "+ ",
        "      isorig[[1]] = isorig[[1]]*isorig[[i]]",
        "+ ",
        "    }",
        "+ ",
        "    dat[, Original := as.logical(isorig[[1]])]",
        "+ ",
        "  }",
        "+ ",
        "  if (!is.null(orig_beta_se)) {",
        "+ ",
        "    if (is.null(orig_spec_values)) {",
        "+ ",
        "      orig_spec_values = rep(0,length(decision_cols))",
        "+ ",
        "    }",
        "+ ",
        "    origspec = data.table(beta = orig_beta_se[1],",
        "+ ",
        "                          se = orig_beta_se[2])",
        "+ ",
        "    for (i in 1:length(orig_spec_values)) {",
        "+ ",
        "      origspec[[decision_cols[i]]] = orig_spec_values[i]",
        "+ ",
        "    }",
        "+ ",
        "    origspec[, Original := TRUE]",
        "+ ",
        "    dat[, Original := FALSE]",
        "+ ",
        "    dat = rbind(dat, origspec, fill = TRUE)",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  dat[, ci90_bot := beta - 1.65*se]",
        "+ ",
        "  dat[, ci90_top := beta + 1.65*se]",
        "+ ",
        "  dat[, ci95_bot := beta - 1.96*se]",
        "+ ",
        "  dat[, ci95_top := beta + 1.96*se]",
        "+ ",
        "  setorder(dat, beta)",
        "+ ",
        "  dat[, order := 1:.N]",
        "+ ",
        "",
        "+ ",
        "  p1 = ggplot2::ggplot(dat, ggplot2::aes(x = order, y = beta,",
        "+ ",
        "                  ymin = ci95_bot, ymax = ci95_top,",
        "+ ",
        "                  xmin = order - .5, xmax = order + .5,",
        "+ ",
        "                  fill = Original)) +",
        "+ ",
        "    ggplot2::geom_rect(alpha = .2) +",
        "+ ",
        "    ggplot2::geom_rect(alpha = .5,",
        "+ ",
        "                       ggplot2::aes(ymin = ci90_bot, ymax = ci90_top)) +",
        "+ ",
        "    ggplot2::geom_point(size = 1, color = 'black',",
        "+ ",
        "                        show.legend = FALSE)+",
        "+ ",
        "    ggplot2::scale_fill_manual(values = c('#00BDD0','salmon'),",
        "+ ",
        "                               labels = c('Variant','Original'))",
        "+ ",
        "  if (!is.null(add_hline_at)) {",
        "+ ",
        "    p1 = p1 + ggplot2::geom_hline(yintercept = add_hline_at,",
        "+ ",
        "                                  color = 'black')",
        "+ ",
        "  }",
        "+ ",
        "  if (sum(dat$Original) == 0) {",
        "+ ",
        "    p1 = p1 + ggplot2::guides(fill = 'none')",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "",
        "+ ",
        "  if (!skip_theme) {",
        "+ ",
        "    p1 = p1 +",
        "+ ",
        "      ggplot2::theme_classic() +",
        "+ ",
        "      ggplot2::theme(axis.title.y = ggplot2::element_text(angle = 0, hjust = 0, vjust = 1),",
        "+ ",
        "                     panel.grid.major.y = ggplot2::element_line(linewidth = .75,",
        "+ ",
        "                                                                 linetype = 'dashed'),",
        "+ ",
        "                     legend.position = 'top') +",
        "+ ",
        "      ggplot2::labs(y = \"Effect\",",
        "+ ",
        "                    caption = '90% and 95% confidence intervals shown.',",
        "+ ",
        "                    fill = NULL)",
        "+ ",
        "  }",
        "+ ",
        "  p1 = p1 +",
        "+ ",
        "    ggplot2::theme(axis.text.x = ggplot2::element_blank(),",
        "+ ",
        "                   axis.title.x = ggplot2::element_blank(),",
        "+ ",
        "                   axis.ticks.x = ggplot2::element_blank())",
        "+ ",
        "",
        "+ ",
        "  p2dat = melt(subset(dat, select = c('order',",
        "+ ",
        "                                      decision_cols)), id.vars = 'order')",
        "+ ",
        "  if (!is.null(decision_labels)) {",
        "+ ",
        "    for (i in 1:length(decision_cols)) {",
        "+ ",
        "      p2dat[variable == decision_cols[i], variable := decision_labels[i]]",
        "+ ",
        "    }",
        "+ ",
        "    p2dat[, variable := factor(variable, levels = rev(decision_labels))]",
        "+ ",
        "  } else {",
        "+ ",
        "    p2dat[, variable := factor(variable, levels = rev(decision_cols))]",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (is.null(color_text_labels)) {",
        "+ ",
        "    p2 = ggplot2::ggplot(p2dat, ggplot2::aes(x = order,",
        "+ ",
        "                                           y = variable,",
        "+ ",
        "                                           label = value)) +",
        "+ ",
        "      ggplot2::geom_text(size = font_size/ggplot2::.pt) +",
        "+ ",
        "      ggplot2::theme_void() +",
        "+ ",
        "      ggplot2::theme(axis.text.y = ggplot2::element_text())",
        "+ ",
        "  } else {",
        "+ ",
        "    p2 = ggplot2::ggplot(p2dat, ggplot2::aes(x = order,",
        "+ ",
        "                                             y = variable,",
        "+ ",
        "                                             label = value,",
        "+ ",
        "                                             color = factor(value))) +",
        "+ ",
        "      ggplot2::geom_text(size = font_size/ggplot2::.pt) +",
        "+ ",
        "      ggplot2::theme_void() +",
        "+ ",
        "      ggplot2::theme(axis.text.y = ggplot2::element_text()) +",
        "+ ",
        "      ggplot2::guides(color = 'none')",
        "+ ",
        "    if (!is.logical(color_text_labels)) {",
        "+ ",
        "      p2 = p2 + color_text_labels",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (return_separate) {",
        "+ ",
        "    return(list(p1,p2))",
        "+ ",
        "  }",
        "+ ",
        "  p1/p2 + patchwork::plot_layout(widths = c(1,1), heights = height_ratio)",
        "+ ",
        "}",
        "> ",
        "spec_curve(cholera_dat[cholera_dat$outcome == 3,],",
        "+ ",
        "           decision_cols = c('analytical_decision_1',",
        "+ ",
        "                             'analytical_decision_2',",
        "+ ",
        "                             'analytical_decision_3'),",
        "+ ",
        "           decision_labels = c('Specification',",
        "+ ",
        "                               'Bandwidth',",
        "+ ",
        "                               'Controls'),",
        "+ ",
        "           orig_spec_values = c(1,1,1))",
        "\nRestarting R session...\n\n"
    ]
}